(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendor.aurelia-fetch-client~e761a4f7"],{

/***/ "qQke":
/*!***************************************************************************************!*\
  !*** ./node_modules/aurelia-fetch-client/dist/native-modules/aurelia-fetch-client.js ***!
  \***************************************************************************************/
/*! exports provided: json, retryStrategy, RetryInterceptor, HttpClientConfiguration, HttpClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"json\", function() { return json; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"retryStrategy\", function() { return retryStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RetryInterceptor\", function() { return RetryInterceptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpClientConfiguration\", function() { return HttpClientConfiguration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpClient\", function() { return HttpClient; });\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-pal */ \"70NS\");\n\n\nfunction json(body, replacer) {\r\n    return JSON.stringify((body !== undefined ? body : {}), replacer);\r\n}\n\nvar retryStrategy = {\r\n    fixed: 0,\r\n    incremental: 1,\r\n    exponential: 2,\r\n    random: 3\r\n};\r\nvar defaultRetryConfig = {\r\n    maxRetries: 3,\r\n    interval: 1000,\r\n    strategy: retryStrategy.fixed\r\n};\r\nvar RetryInterceptor = (function () {\r\n    function RetryInterceptor(retryConfig) {\r\n        this.retryConfig = Object.assign({}, defaultRetryConfig, retryConfig || {});\r\n        if (this.retryConfig.strategy === retryStrategy.exponential &&\r\n            this.retryConfig.interval <= 1000) {\r\n            throw new Error('An interval less than or equal to 1 second is not allowed when using the exponential retry strategy');\r\n        }\r\n    }\r\n    RetryInterceptor.prototype.request = function (request) {\r\n        var $r = request;\r\n        if (!$r.retryConfig) {\r\n            $r.retryConfig = Object.assign({}, this.retryConfig);\r\n            $r.retryConfig.counter = 0;\r\n        }\r\n        $r.retryConfig.requestClone = request.clone();\r\n        return request;\r\n    };\r\n    RetryInterceptor.prototype.response = function (response, request) {\r\n        delete request.retryConfig;\r\n        return response;\r\n    };\r\n    RetryInterceptor.prototype.responseError = function (error, request, httpClient) {\r\n        var retryConfig = request.retryConfig;\r\n        var requestClone = retryConfig.requestClone;\r\n        return Promise.resolve().then(function () {\r\n            if (retryConfig.counter < retryConfig.maxRetries) {\r\n                var result = retryConfig.doRetry ? retryConfig.doRetry(error, request) : true;\r\n                return Promise.resolve(result).then(function (doRetry) {\r\n                    if (doRetry) {\r\n                        retryConfig.counter++;\r\n                        return new Promise(function (resolve) { return aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"PLATFORM\"].global.setTimeout(resolve, calculateDelay(retryConfig) || 0); })\r\n                            .then(function () {\r\n                            var newRequest = requestClone.clone();\r\n                            if (typeof (retryConfig.beforeRetry) === 'function') {\r\n                                return retryConfig.beforeRetry(newRequest, httpClient);\r\n                            }\r\n                            return newRequest;\r\n                        })\r\n                            .then(function (newRequest) {\r\n                            return httpClient.fetch(Object.assign(newRequest, { retryConfig: retryConfig }));\r\n                        });\r\n                    }\r\n                    delete request.retryConfig;\r\n                    throw error;\r\n                });\r\n            }\r\n            delete request.retryConfig;\r\n            throw error;\r\n        });\r\n    };\r\n    return RetryInterceptor;\r\n}());\r\nfunction calculateDelay(retryConfig) {\r\n    var interval = retryConfig.interval, strategy = retryConfig.strategy, minRandomInterval = retryConfig.minRandomInterval, maxRandomInterval = retryConfig.maxRandomInterval, counter = retryConfig.counter;\r\n    if (typeof (strategy) === 'function') {\r\n        return retryConfig.strategy(counter);\r\n    }\r\n    switch (strategy) {\r\n        case (retryStrategy.fixed):\r\n            return retryStrategies[retryStrategy.fixed](interval);\r\n        case (retryStrategy.incremental):\r\n            return retryStrategies[retryStrategy.incremental](counter, interval);\r\n        case (retryStrategy.exponential):\r\n            return retryStrategies[retryStrategy.exponential](counter, interval);\r\n        case (retryStrategy.random):\r\n            return retryStrategies[retryStrategy.random](counter, interval, minRandomInterval, maxRandomInterval);\r\n        default:\r\n            throw new Error('Unrecognized retry strategy');\r\n    }\r\n}\r\nvar retryStrategies = [\r\n    function (interval) { return interval; },\r\n    function (retryCount, interval) { return interval * retryCount; },\r\n    function (retryCount, interval) { return retryCount === 1 ? interval : Math.pow(interval, retryCount) / 1000; },\r\n    function (retryCount, interval, minRandomInterval, maxRandomInterval) {\r\n        if (minRandomInterval === void 0) { minRandomInterval = 0; }\r\n        if (maxRandomInterval === void 0) { maxRandomInterval = 60000; }\r\n        return Math.random() * (maxRandomInterval - minRandomInterval) + minRandomInterval;\r\n    }\r\n];\n\nvar HttpClientConfiguration = (function () {\r\n    function HttpClientConfiguration() {\r\n        this.baseUrl = '';\r\n        this.defaults = {};\r\n        this.interceptors = [];\r\n    }\r\n    HttpClientConfiguration.prototype.withBaseUrl = function (baseUrl) {\r\n        this.baseUrl = baseUrl;\r\n        return this;\r\n    };\r\n    HttpClientConfiguration.prototype.withDefaults = function (defaults) {\r\n        this.defaults = defaults;\r\n        return this;\r\n    };\r\n    HttpClientConfiguration.prototype.withInterceptor = function (interceptor) {\r\n        this.interceptors.push(interceptor);\r\n        return this;\r\n    };\r\n    HttpClientConfiguration.prototype.useStandardConfiguration = function () {\r\n        var standardConfig = { credentials: 'same-origin' };\r\n        Object.assign(this.defaults, standardConfig, this.defaults);\r\n        return this.rejectErrorResponses();\r\n    };\r\n    HttpClientConfiguration.prototype.rejectErrorResponses = function () {\r\n        return this.withInterceptor({ response: rejectOnError });\r\n    };\r\n    HttpClientConfiguration.prototype.withRetry = function (config) {\r\n        var interceptor = new RetryInterceptor(config);\r\n        return this.withInterceptor(interceptor);\r\n    };\r\n    return HttpClientConfiguration;\r\n}());\r\nfunction rejectOnError(response) {\r\n    if (!response.ok) {\r\n        throw response;\r\n    }\r\n    return response;\r\n}\n\nvar HttpClient = (function () {\r\n    function HttpClient() {\r\n        this.activeRequestCount = 0;\r\n        this.isRequesting = false;\r\n        this.isConfigured = false;\r\n        this.baseUrl = '';\r\n        this.defaults = null;\r\n        this.interceptors = [];\r\n        if (typeof fetch === 'undefined') {\r\n            throw new Error('HttpClient requires a Fetch API implementation, but the current environment doesn\\'t support it. You may need to load a polyfill such as https://github.com/github/fetch');\r\n        }\r\n    }\r\n    HttpClient.prototype.configure = function (config) {\r\n        var normalizedConfig;\r\n        if (typeof config === 'object') {\r\n            normalizedConfig = { defaults: config };\r\n        }\r\n        else if (typeof config === 'function') {\r\n            normalizedConfig = new HttpClientConfiguration();\r\n            normalizedConfig.baseUrl = this.baseUrl;\r\n            normalizedConfig.defaults = Object.assign({}, this.defaults);\r\n            normalizedConfig.interceptors = this.interceptors;\r\n            var c = config(normalizedConfig);\r\n            if (HttpClientConfiguration.prototype.isPrototypeOf(c)) {\r\n                normalizedConfig = c;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('invalid config');\r\n        }\r\n        var defaults = normalizedConfig.defaults;\r\n        if (defaults && Headers.prototype.isPrototypeOf(defaults.headers)) {\r\n            throw new Error('Default headers must be a plain object.');\r\n        }\r\n        var interceptors = normalizedConfig.interceptors;\r\n        if (interceptors && interceptors.length) {\r\n            if (interceptors.filter(function (x) { return RetryInterceptor.prototype.isPrototypeOf(x); }).length > 1) {\r\n                throw new Error('Only one RetryInterceptor is allowed.');\r\n            }\r\n            var retryInterceptorIndex = interceptors.findIndex(function (x) { return RetryInterceptor.prototype.isPrototypeOf(x); });\r\n            if (retryInterceptorIndex >= 0 && retryInterceptorIndex !== interceptors.length - 1) {\r\n                throw new Error('The retry interceptor must be the last interceptor defined.');\r\n            }\r\n        }\r\n        this.baseUrl = normalizedConfig.baseUrl;\r\n        this.defaults = defaults;\r\n        this.interceptors = normalizedConfig.interceptors || [];\r\n        this.isConfigured = true;\r\n        return this;\r\n    };\r\n    HttpClient.prototype.fetch = function (input, init) {\r\n        var _this = this;\r\n        trackRequestStart(this);\r\n        var request = this.buildRequest(input, init);\r\n        return processRequest(request, this.interceptors, this).then(function (result) {\r\n            var response = null;\r\n            if (Response.prototype.isPrototypeOf(result)) {\r\n                response = Promise.resolve(result);\r\n            }\r\n            else if (Request.prototype.isPrototypeOf(result)) {\r\n                request = result;\r\n                response = fetch(result);\r\n            }\r\n            else {\r\n                throw new Error(\"An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [\" + result + \"]\");\r\n            }\r\n            return processResponse(response, _this.interceptors, request, _this);\r\n        })\r\n            .then(function (result) {\r\n            if (Request.prototype.isPrototypeOf(result)) {\r\n                return _this.fetch(result);\r\n            }\r\n            return result;\r\n        })\r\n            .then(function (result) {\r\n            trackRequestEnd(_this);\r\n            return result;\r\n        }, function (error) {\r\n            trackRequestEnd(_this);\r\n            throw error;\r\n        });\r\n    };\r\n    HttpClient.prototype.buildRequest = function (input, init) {\r\n        var defaults = this.defaults || {};\r\n        var request;\r\n        var body;\r\n        var requestContentType;\r\n        var parsedDefaultHeaders = parseHeaderValues(defaults.headers);\r\n        if (Request.prototype.isPrototypeOf(input)) {\r\n            request = input;\r\n            requestContentType = new Headers(request.headers).get('Content-Type');\r\n        }\r\n        else {\r\n            if (!init) {\r\n                init = {};\r\n            }\r\n            body = init.body;\r\n            var bodyObj = body ? { body: body } : null;\r\n            var requestInit = Object.assign({}, defaults, { headers: {} }, init, bodyObj);\r\n            requestContentType = new Headers(requestInit.headers).get('Content-Type');\r\n            request = new Request(getRequestUrl(this.baseUrl, input), requestInit);\r\n        }\r\n        if (!requestContentType) {\r\n            if (new Headers(parsedDefaultHeaders).has('content-type')) {\r\n                request.headers.set('Content-Type', new Headers(parsedDefaultHeaders).get('content-type'));\r\n            }\r\n            else if (body && isJSON(body)) {\r\n                request.headers.set('Content-Type', 'application/json');\r\n            }\r\n        }\r\n        setDefaultHeaders(request.headers, parsedDefaultHeaders);\r\n        if (body && Blob.prototype.isPrototypeOf(body) && body.type) {\r\n            request.headers.set('Content-Type', body.type);\r\n        }\r\n        return request;\r\n    };\r\n    HttpClient.prototype.get = function (input, init) {\r\n        return this.fetch(input, init);\r\n    };\r\n    HttpClient.prototype.post = function (input, body, init) {\r\n        return callFetch(this, input, body, init, 'POST');\r\n    };\r\n    HttpClient.prototype.put = function (input, body, init) {\r\n        return callFetch(this, input, body, init, 'PUT');\r\n    };\r\n    HttpClient.prototype.patch = function (input, body, init) {\r\n        return callFetch(this, input, body, init, 'PATCH');\r\n    };\r\n    HttpClient.prototype.delete = function (input, body, init) {\r\n        return callFetch(this, input, body, init, 'DELETE');\r\n    };\r\n    return HttpClient;\r\n}());\r\nvar absoluteUrlRegexp = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\r\nfunction trackRequestStart(client) {\r\n    client.isRequesting = !!(++client.activeRequestCount);\r\n    if (client.isRequesting) {\r\n        var evt_1 = aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"DOM\"].createCustomEvent('aurelia-fetch-client-request-started', { bubbles: true, cancelable: true });\r\n        setTimeout(function () { return aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"DOM\"].dispatchEvent(evt_1); }, 1);\r\n    }\r\n}\r\nfunction trackRequestEnd(client) {\r\n    client.isRequesting = !!(--client.activeRequestCount);\r\n    if (!client.isRequesting) {\r\n        var evt_2 = aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"DOM\"].createCustomEvent('aurelia-fetch-client-requests-drained', { bubbles: true, cancelable: true });\r\n        setTimeout(function () { return aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"DOM\"].dispatchEvent(evt_2); }, 1);\r\n    }\r\n}\r\nfunction parseHeaderValues(headers) {\r\n    var parsedHeaders = {};\r\n    for (var name_1 in headers || {}) {\r\n        if (headers.hasOwnProperty(name_1)) {\r\n            parsedHeaders[name_1] = (typeof headers[name_1] === 'function') ? headers[name_1]() : headers[name_1];\r\n        }\r\n    }\r\n    return parsedHeaders;\r\n}\r\nfunction getRequestUrl(baseUrl, url) {\r\n    if (absoluteUrlRegexp.test(url)) {\r\n        return url;\r\n    }\r\n    return (baseUrl || '') + url;\r\n}\r\nfunction setDefaultHeaders(headers, defaultHeaders) {\r\n    for (var name_2 in defaultHeaders || {}) {\r\n        if (defaultHeaders.hasOwnProperty(name_2) && !headers.has(name_2)) {\r\n            headers.set(name_2, defaultHeaders[name_2]);\r\n        }\r\n    }\r\n}\r\nfunction processRequest(request, interceptors, http) {\r\n    return applyInterceptors(request, interceptors, 'request', 'requestError', http);\r\n}\r\nfunction processResponse(response, interceptors, request, http) {\r\n    return applyInterceptors(response, interceptors, 'response', 'responseError', request, http);\r\n}\r\nfunction applyInterceptors(input, interceptors, successName, errorName) {\r\n    var interceptorArgs = [];\r\n    for (var _i = 4; _i < arguments.length; _i++) {\r\n        interceptorArgs[_i - 4] = arguments[_i];\r\n    }\r\n    return (interceptors || [])\r\n        .reduce(function (chain, interceptor) {\r\n        var successHandler = interceptor[successName];\r\n        var errorHandler = interceptor[errorName];\r\n        return chain.then(successHandler && (function (value) { return successHandler.call.apply(successHandler, [interceptor, value].concat(interceptorArgs)); }) || identity, errorHandler && (function (reason) { return errorHandler.call.apply(errorHandler, [interceptor, reason].concat(interceptorArgs)); }) || thrower);\r\n    }, Promise.resolve(input));\r\n}\r\nfunction isJSON(str) {\r\n    try {\r\n        JSON.parse(str);\r\n    }\r\n    catch (err) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction identity(x) {\r\n    return x;\r\n}\r\nfunction thrower(x) {\r\n    throw x;\r\n}\r\nfunction callFetch(client, input, body, init, method) {\r\n    if (!init) {\r\n        init = {};\r\n    }\r\n    init.method = method;\r\n    if (body) {\r\n        init.body = body;\r\n    }\r\n    return client.fetch(input, init);\r\n}\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promise-polyfill */ \"B/eG\")[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicVFrZS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWZldGNoLWNsaWVudC9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtZmV0Y2gtY2xpZW50LmpzP2E5MDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUExBVEZPUk0sIERPTSB9IGZyb20gJ2F1cmVsaWEtcGFsJztcblxuZnVuY3Rpb24ganNvbihib2R5LCByZXBsYWNlcikge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KChib2R5ICE9PSB1bmRlZmluZWQgPyBib2R5IDoge30pLCByZXBsYWNlcik7XHJcbn1cblxudmFyIHJldHJ5U3RyYXRlZ3kgPSB7XHJcbiAgICBmaXhlZDogMCxcclxuICAgIGluY3JlbWVudGFsOiAxLFxyXG4gICAgZXhwb25lbnRpYWw6IDIsXHJcbiAgICByYW5kb206IDNcclxufTtcclxudmFyIGRlZmF1bHRSZXRyeUNvbmZpZyA9IHtcclxuICAgIG1heFJldHJpZXM6IDMsXHJcbiAgICBpbnRlcnZhbDogMTAwMCxcclxuICAgIHN0cmF0ZWd5OiByZXRyeVN0cmF0ZWd5LmZpeGVkXHJcbn07XHJcbnZhciBSZXRyeUludGVyY2VwdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJldHJ5SW50ZXJjZXB0b3IocmV0cnlDb25maWcpIHtcclxuICAgICAgICB0aGlzLnJldHJ5Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFJldHJ5Q29uZmlnLCByZXRyeUNvbmZpZyB8fCB7fSk7XHJcbiAgICAgICAgaWYgKHRoaXMucmV0cnlDb25maWcuc3RyYXRlZ3kgPT09IHJldHJ5U3RyYXRlZ3kuZXhwb25lbnRpYWwgJiZcclxuICAgICAgICAgICAgdGhpcy5yZXRyeUNvbmZpZy5pbnRlcnZhbCA8PSAxMDAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gaW50ZXJ2YWwgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDEgc2Vjb25kIGlzIG5vdCBhbGxvd2VkIHdoZW4gdXNpbmcgdGhlIGV4cG9uZW50aWFsIHJldHJ5IHN0cmF0ZWd5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUmV0cnlJbnRlcmNlcHRvci5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XHJcbiAgICAgICAgdmFyICRyID0gcmVxdWVzdDtcclxuICAgICAgICBpZiAoISRyLnJldHJ5Q29uZmlnKSB7XHJcbiAgICAgICAgICAgICRyLnJldHJ5Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yZXRyeUNvbmZpZyk7XHJcbiAgICAgICAgICAgICRyLnJldHJ5Q29uZmlnLmNvdW50ZXIgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkci5yZXRyeUNvbmZpZy5yZXF1ZXN0Q2xvbmUgPSByZXF1ZXN0LmNsb25lKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XHJcbiAgICB9O1xyXG4gICAgUmV0cnlJbnRlcmNlcHRvci5wcm90b3R5cGUucmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UsIHJlcXVlc3QpIHtcclxuICAgICAgICBkZWxldGUgcmVxdWVzdC5yZXRyeUNvbmZpZztcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9O1xyXG4gICAgUmV0cnlJbnRlcmNlcHRvci5wcm90b3R5cGUucmVzcG9uc2VFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgcmVxdWVzdCwgaHR0cENsaWVudCkge1xyXG4gICAgICAgIHZhciByZXRyeUNvbmZpZyA9IHJlcXVlc3QucmV0cnlDb25maWc7XHJcbiAgICAgICAgdmFyIHJlcXVlc3RDbG9uZSA9IHJldHJ5Q29uZmlnLnJlcXVlc3RDbG9uZTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXRyeUNvbmZpZy5jb3VudGVyIDwgcmV0cnlDb25maWcubWF4UmV0cmllcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJldHJ5Q29uZmlnLmRvUmV0cnkgPyByZXRyeUNvbmZpZy5kb1JldHJ5KGVycm9yLCByZXF1ZXN0KSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihmdW5jdGlvbiAoZG9SZXRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb1JldHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5Q29uZmlnLmNvdW50ZXIrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBQTEFURk9STS5nbG9iYWwuc2V0VGltZW91dChyZXNvbHZlLCBjYWxjdWxhdGVEZWxheShyZXRyeUNvbmZpZykgfHwgMCk7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UmVxdWVzdCA9IHJlcXVlc3RDbG9uZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocmV0cnlDb25maWcuYmVmb3JlUmV0cnkpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHJ5Q29uZmlnLmJlZm9yZVJldHJ5KG5ld1JlcXVlc3QsIGh0dHBDbGllbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1JlcXVlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobmV3UmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0dHBDbGllbnQuZmV0Y2goT2JqZWN0LmFzc2lnbihuZXdSZXF1ZXN0LCB7IHJldHJ5Q29uZmlnOiByZXRyeUNvbmZpZyB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdC5yZXRyeUNvbmZpZztcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0LnJldHJ5Q29uZmlnO1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmV0cnlJbnRlcmNlcHRvcjtcclxufSgpKTtcclxuZnVuY3Rpb24gY2FsY3VsYXRlRGVsYXkocmV0cnlDb25maWcpIHtcclxuICAgIHZhciBpbnRlcnZhbCA9IHJldHJ5Q29uZmlnLmludGVydmFsLCBzdHJhdGVneSA9IHJldHJ5Q29uZmlnLnN0cmF0ZWd5LCBtaW5SYW5kb21JbnRlcnZhbCA9IHJldHJ5Q29uZmlnLm1pblJhbmRvbUludGVydmFsLCBtYXhSYW5kb21JbnRlcnZhbCA9IHJldHJ5Q29uZmlnLm1heFJhbmRvbUludGVydmFsLCBjb3VudGVyID0gcmV0cnlDb25maWcuY291bnRlcjtcclxuICAgIGlmICh0eXBlb2YgKHN0cmF0ZWd5KSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHJldHVybiByZXRyeUNvbmZpZy5zdHJhdGVneShjb3VudGVyKTtcclxuICAgIH1cclxuICAgIHN3aXRjaCAoc3RyYXRlZ3kpIHtcclxuICAgICAgICBjYXNlIChyZXRyeVN0cmF0ZWd5LmZpeGVkKTpcclxuICAgICAgICAgICAgcmV0dXJuIHJldHJ5U3RyYXRlZ2llc1tyZXRyeVN0cmF0ZWd5LmZpeGVkXShpbnRlcnZhbCk7XHJcbiAgICAgICAgY2FzZSAocmV0cnlTdHJhdGVneS5pbmNyZW1lbnRhbCk6XHJcbiAgICAgICAgICAgIHJldHVybiByZXRyeVN0cmF0ZWdpZXNbcmV0cnlTdHJhdGVneS5pbmNyZW1lbnRhbF0oY291bnRlciwgaW50ZXJ2YWwpO1xyXG4gICAgICAgIGNhc2UgKHJldHJ5U3RyYXRlZ3kuZXhwb25lbnRpYWwpOlxyXG4gICAgICAgICAgICByZXR1cm4gcmV0cnlTdHJhdGVnaWVzW3JldHJ5U3RyYXRlZ3kuZXhwb25lbnRpYWxdKGNvdW50ZXIsIGludGVydmFsKTtcclxuICAgICAgICBjYXNlIChyZXRyeVN0cmF0ZWd5LnJhbmRvbSk6XHJcbiAgICAgICAgICAgIHJldHVybiByZXRyeVN0cmF0ZWdpZXNbcmV0cnlTdHJhdGVneS5yYW5kb21dKGNvdW50ZXIsIGludGVydmFsLCBtaW5SYW5kb21JbnRlcnZhbCwgbWF4UmFuZG9tSW50ZXJ2YWwpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIHJldHJ5IHN0cmF0ZWd5Jyk7XHJcbiAgICB9XHJcbn1cclxudmFyIHJldHJ5U3RyYXRlZ2llcyA9IFtcclxuICAgIGZ1bmN0aW9uIChpbnRlcnZhbCkgeyByZXR1cm4gaW50ZXJ2YWw7IH0sXHJcbiAgICBmdW5jdGlvbiAocmV0cnlDb3VudCwgaW50ZXJ2YWwpIHsgcmV0dXJuIGludGVydmFsICogcmV0cnlDb3VudDsgfSxcclxuICAgIGZ1bmN0aW9uIChyZXRyeUNvdW50LCBpbnRlcnZhbCkgeyByZXR1cm4gcmV0cnlDb3VudCA9PT0gMSA/IGludGVydmFsIDogTWF0aC5wb3coaW50ZXJ2YWwsIHJldHJ5Q291bnQpIC8gMTAwMDsgfSxcclxuICAgIGZ1bmN0aW9uIChyZXRyeUNvdW50LCBpbnRlcnZhbCwgbWluUmFuZG9tSW50ZXJ2YWwsIG1heFJhbmRvbUludGVydmFsKSB7XHJcbiAgICAgICAgaWYgKG1pblJhbmRvbUludGVydmFsID09PSB2b2lkIDApIHsgbWluUmFuZG9tSW50ZXJ2YWwgPSAwOyB9XHJcbiAgICAgICAgaWYgKG1heFJhbmRvbUludGVydmFsID09PSB2b2lkIDApIHsgbWF4UmFuZG9tSW50ZXJ2YWwgPSA2MDAwMDsgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heFJhbmRvbUludGVydmFsIC0gbWluUmFuZG9tSW50ZXJ2YWwpICsgbWluUmFuZG9tSW50ZXJ2YWw7XHJcbiAgICB9XHJcbl07XG5cbnZhciBIdHRwQ2xpZW50Q29uZmlndXJhdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdHRwQ2xpZW50Q29uZmlndXJhdGlvbigpIHtcclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSAnJztcclxuICAgICAgICB0aGlzLmRlZmF1bHRzID0ge307XHJcbiAgICAgICAgdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcclxuICAgIH1cclxuICAgIEh0dHBDbGllbnRDb25maWd1cmF0aW9uLnByb3RvdHlwZS53aXRoQmFzZVVybCA9IGZ1bmN0aW9uIChiYXNlVXJsKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBIdHRwQ2xpZW50Q29uZmlndXJhdGlvbi5wcm90b3R5cGUud2l0aERlZmF1bHRzID0gZnVuY3Rpb24gKGRlZmF1bHRzKSB7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IGRlZmF1bHRzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnRDb25maWd1cmF0aW9uLnByb3RvdHlwZS53aXRoSW50ZXJjZXB0b3IgPSBmdW5jdGlvbiAoaW50ZXJjZXB0b3IpIHtcclxuICAgICAgICB0aGlzLmludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBIdHRwQ2xpZW50Q29uZmlndXJhdGlvbi5wcm90b3R5cGUudXNlU3RhbmRhcmRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdGFuZGFyZENvbmZpZyA9IHsgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicgfTtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZGVmYXVsdHMsIHN0YW5kYXJkQ29uZmlnLCB0aGlzLmRlZmF1bHRzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWplY3RFcnJvclJlc3BvbnNlcygpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnRDb25maWd1cmF0aW9uLnByb3RvdHlwZS5yZWplY3RFcnJvclJlc3BvbnNlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aXRoSW50ZXJjZXB0b3IoeyByZXNwb25zZTogcmVqZWN0T25FcnJvciB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ2xpZW50Q29uZmlndXJhdGlvbi5wcm90b3R5cGUud2l0aFJldHJ5ID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IG5ldyBSZXRyeUludGVyY2VwdG9yKGNvbmZpZyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aEludGVyY2VwdG9yKGludGVyY2VwdG9yKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSHR0cENsaWVudENvbmZpZ3VyYXRpb247XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIHJlamVjdE9uRXJyb3IocmVzcG9uc2UpIHtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyByZXNwb25zZTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXNwb25zZTtcclxufVxuXG52YXIgSHR0cENsaWVudCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdHRwQ2xpZW50KCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlUmVxdWVzdENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLmlzUmVxdWVzdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNDb25maWd1cmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gJyc7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcclxuICAgICAgICBpZiAodHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0h0dHBDbGllbnQgcmVxdWlyZXMgYSBGZXRjaCBBUEkgaW1wbGVtZW50YXRpb24sIGJ1dCB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBkb2VzblxcJ3Qgc3VwcG9ydCBpdC4gWW91IG1heSBuZWVkIHRvIGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvZmV0Y2gnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5jb25maWd1cmUgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRDb25maWc7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRDb25maWcgPSB7IGRlZmF1bHRzOiBjb25maWcgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBub3JtYWxpemVkQ29uZmlnID0gbmV3IEh0dHBDbGllbnRDb25maWd1cmF0aW9uKCk7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRDb25maWcuYmFzZVVybCA9IHRoaXMuYmFzZVVybDtcclxuICAgICAgICAgICAgbm9ybWFsaXplZENvbmZpZy5kZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMpO1xyXG4gICAgICAgICAgICBub3JtYWxpemVkQ29uZmlnLmludGVyY2VwdG9ycyA9IHRoaXMuaW50ZXJjZXB0b3JzO1xyXG4gICAgICAgICAgICB2YXIgYyA9IGNvbmZpZyhub3JtYWxpemVkQ29uZmlnKTtcclxuICAgICAgICAgICAgaWYgKEh0dHBDbGllbnRDb25maWd1cmF0aW9uLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGMpKSB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkQ29uZmlnID0gYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNvbmZpZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGVmYXVsdHMgPSBub3JtYWxpemVkQ29uZmlnLmRlZmF1bHRzO1xyXG4gICAgICAgIGlmIChkZWZhdWx0cyAmJiBIZWFkZXJzLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGRlZmF1bHRzLmhlYWRlcnMpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGVmYXVsdCBoZWFkZXJzIG11c3QgYmUgYSBwbGFpbiBvYmplY3QuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbnRlcmNlcHRvcnMgPSBub3JtYWxpemVkQ29uZmlnLmludGVyY2VwdG9ycztcclxuICAgICAgICBpZiAoaW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKGludGVyY2VwdG9ycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIFJldHJ5SW50ZXJjZXB0b3IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoeCk7IH0pLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgUmV0cnlJbnRlcmNlcHRvciBpcyBhbGxvd2VkLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZXRyeUludGVyY2VwdG9ySW5kZXggPSBpbnRlcmNlcHRvcnMuZmluZEluZGV4KGZ1bmN0aW9uICh4KSB7IHJldHVybiBSZXRyeUludGVyY2VwdG9yLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHgpOyB9KTtcclxuICAgICAgICAgICAgaWYgKHJldHJ5SW50ZXJjZXB0b3JJbmRleCA+PSAwICYmIHJldHJ5SW50ZXJjZXB0b3JJbmRleCAhPT0gaW50ZXJjZXB0b3JzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHJldHJ5IGludGVyY2VwdG9yIG11c3QgYmUgdGhlIGxhc3QgaW50ZXJjZXB0b3IgZGVmaW5lZC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBub3JtYWxpemVkQ29uZmlnLmJhc2VVcmw7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IGRlZmF1bHRzO1xyXG4gICAgICAgIHRoaXMuaW50ZXJjZXB0b3JzID0gbm9ybWFsaXplZENvbmZpZy5pbnRlcmNlcHRvcnMgfHwgW107XHJcbiAgICAgICAgdGhpcy5pc0NvbmZpZ3VyZWQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24gKGlucHV0LCBpbml0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0cmFja1JlcXVlc3RTdGFydCh0aGlzKTtcclxuICAgICAgICB2YXIgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KGlucHV0LCBpbml0KTtcclxuICAgICAgICByZXR1cm4gcHJvY2Vzc1JlcXVlc3QocmVxdWVzdCwgdGhpcy5pbnRlcmNlcHRvcnMsIHRoaXMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoUmVzcG9uc2UucHJvdG90eXBlLmlzUHJvdG90eXBlT2YocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZldGNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBpbnZhbGlkIHJlc3VsdCB3YXMgcmV0dXJuZWQgYnkgdGhlIGludGVyY2VwdG9yIGNoYWluLiBFeHBlY3RlZCBhIFJlcXVlc3Qgb3IgUmVzcG9uc2UgaW5zdGFuY2UsIGJ1dCBnb3QgW1wiICsgcmVzdWx0ICsgXCJdXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UsIF90aGlzLmludGVyY2VwdG9ycywgcmVxdWVzdCwgX3RoaXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgaWYgKFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHRyYWNrUmVxdWVzdEVuZChfdGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRyYWNrUmVxdWVzdEVuZChfdGhpcyk7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLmJ1aWxkUmVxdWVzdCA9IGZ1bmN0aW9uIChpbnB1dCwgaW5pdCkge1xyXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgfHwge307XHJcbiAgICAgICAgdmFyIHJlcXVlc3Q7XHJcbiAgICAgICAgdmFyIGJvZHk7XHJcbiAgICAgICAgdmFyIHJlcXVlc3RDb250ZW50VHlwZTtcclxuICAgICAgICB2YXIgcGFyc2VkRGVmYXVsdEhlYWRlcnMgPSBwYXJzZUhlYWRlclZhbHVlcyhkZWZhdWx0cy5oZWFkZXJzKTtcclxuICAgICAgICBpZiAoUmVxdWVzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnB1dCkpIHtcclxuICAgICAgICAgICAgcmVxdWVzdCA9IGlucHV0O1xyXG4gICAgICAgICAgICByZXF1ZXN0Q29udGVudFR5cGUgPSBuZXcgSGVhZGVycyhyZXF1ZXN0LmhlYWRlcnMpLmdldCgnQ29udGVudC1UeXBlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIWluaXQpIHtcclxuICAgICAgICAgICAgICAgIGluaXQgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBib2R5ID0gaW5pdC5ib2R5O1xyXG4gICAgICAgICAgICB2YXIgYm9keU9iaiA9IGJvZHkgPyB7IGJvZHk6IGJvZHkgfSA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0SW5pdCA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCB7IGhlYWRlcnM6IHt9IH0sIGluaXQsIGJvZHlPYmopO1xyXG4gICAgICAgICAgICByZXF1ZXN0Q29udGVudFR5cGUgPSBuZXcgSGVhZGVycyhyZXF1ZXN0SW5pdC5oZWFkZXJzKS5nZXQoJ0NvbnRlbnQtVHlwZScpO1xyXG4gICAgICAgICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoZ2V0UmVxdWVzdFVybCh0aGlzLmJhc2VVcmwsIGlucHV0KSwgcmVxdWVzdEluaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlcXVlc3RDb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBpZiAobmV3IEhlYWRlcnMocGFyc2VkRGVmYXVsdEhlYWRlcnMpLmhhcygnY29udGVudC10eXBlJykpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIG5ldyBIZWFkZXJzKHBhcnNlZERlZmF1bHRIZWFkZXJzKS5nZXQoJ2NvbnRlbnQtdHlwZScpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChib2R5ICYmIGlzSlNPTihib2R5KSkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZXREZWZhdWx0SGVhZGVycyhyZXF1ZXN0LmhlYWRlcnMsIHBhcnNlZERlZmF1bHRIZWFkZXJzKTtcclxuICAgICAgICBpZiAoYm9keSAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpICYmIGJvZHkudHlwZSkge1xyXG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBib2R5LnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH07XHJcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaW5wdXQsIGluaXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChpbnB1dCwgaW5pdCk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChpbnB1dCwgYm9keSwgaW5pdCkge1xyXG4gICAgICAgIHJldHVybiBjYWxsRmV0Y2godGhpcywgaW5wdXQsIGJvZHksIGluaXQsICdQT1NUJyk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKGlucHV0LCBib2R5LCBpbml0KSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbGxGZXRjaCh0aGlzLCBpbnB1dCwgYm9keSwgaW5pdCwgJ1BVVCcpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLnBhdGNoID0gZnVuY3Rpb24gKGlucHV0LCBib2R5LCBpbml0KSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbGxGZXRjaCh0aGlzLCBpbnB1dCwgYm9keSwgaW5pdCwgJ1BBVENIJyk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGlucHV0LCBib2R5LCBpbml0KSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbGxGZXRjaCh0aGlzLCBpbnB1dCwgYm9keSwgaW5pdCwgJ0RFTEVURScpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIdHRwQ2xpZW50O1xyXG59KCkpO1xyXG52YXIgYWJzb2x1dGVVcmxSZWdleHAgPSAvXihbYS16XVthLXowLTkrXFwtLl0qOik/XFwvXFwvL2k7XHJcbmZ1bmN0aW9uIHRyYWNrUmVxdWVzdFN0YXJ0KGNsaWVudCkge1xyXG4gICAgY2xpZW50LmlzUmVxdWVzdGluZyA9ICEhKCsrY2xpZW50LmFjdGl2ZVJlcXVlc3RDb3VudCk7XHJcbiAgICBpZiAoY2xpZW50LmlzUmVxdWVzdGluZykge1xyXG4gICAgICAgIHZhciBldnRfMSA9IERPTS5jcmVhdGVDdXN0b21FdmVudCgnYXVyZWxpYS1mZXRjaC1jbGllbnQtcmVxdWVzdC1zdGFydGVkJywgeyBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlIH0pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gRE9NLmRpc3BhdGNoRXZlbnQoZXZ0XzEpOyB9LCAxKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmFja1JlcXVlc3RFbmQoY2xpZW50KSB7XHJcbiAgICBjbGllbnQuaXNSZXF1ZXN0aW5nID0gISEoLS1jbGllbnQuYWN0aXZlUmVxdWVzdENvdW50KTtcclxuICAgIGlmICghY2xpZW50LmlzUmVxdWVzdGluZykge1xyXG4gICAgICAgIHZhciBldnRfMiA9IERPTS5jcmVhdGVDdXN0b21FdmVudCgnYXVyZWxpYS1mZXRjaC1jbGllbnQtcmVxdWVzdHMtZHJhaW5lZCcsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIERPTS5kaXNwYXRjaEV2ZW50KGV2dF8yKTsgfSwgMSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VIZWFkZXJWYWx1ZXMoaGVhZGVycykge1xyXG4gICAgdmFyIHBhcnNlZEhlYWRlcnMgPSB7fTtcclxuICAgIGZvciAodmFyIG5hbWVfMSBpbiBoZWFkZXJzIHx8IHt9KSB7XHJcbiAgICAgICAgaWYgKGhlYWRlcnMuaGFzT3duUHJvcGVydHkobmFtZV8xKSkge1xyXG4gICAgICAgICAgICBwYXJzZWRIZWFkZXJzW25hbWVfMV0gPSAodHlwZW9mIGhlYWRlcnNbbmFtZV8xXSA9PT0gJ2Z1bmN0aW9uJykgPyBoZWFkZXJzW25hbWVfMV0oKSA6IGhlYWRlcnNbbmFtZV8xXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyc2VkSGVhZGVycztcclxufVxyXG5mdW5jdGlvbiBnZXRSZXF1ZXN0VXJsKGJhc2VVcmwsIHVybCkge1xyXG4gICAgaWYgKGFic29sdXRlVXJsUmVnZXhwLnRlc3QodXJsKSkge1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGJhc2VVcmwgfHwgJycpICsgdXJsO1xyXG59XHJcbmZ1bmN0aW9uIHNldERlZmF1bHRIZWFkZXJzKGhlYWRlcnMsIGRlZmF1bHRIZWFkZXJzKSB7XHJcbiAgICBmb3IgKHZhciBuYW1lXzIgaW4gZGVmYXVsdEhlYWRlcnMgfHwge30pIHtcclxuICAgICAgICBpZiAoZGVmYXVsdEhlYWRlcnMuaGFzT3duUHJvcGVydHkobmFtZV8yKSAmJiAhaGVhZGVycy5oYXMobmFtZV8yKSkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnNldChuYW1lXzIsIGRlZmF1bHRIZWFkZXJzW25hbWVfMl0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBwcm9jZXNzUmVxdWVzdChyZXF1ZXN0LCBpbnRlcmNlcHRvcnMsIGh0dHApIHtcclxuICAgIHJldHVybiBhcHBseUludGVyY2VwdG9ycyhyZXF1ZXN0LCBpbnRlcmNlcHRvcnMsICdyZXF1ZXN0JywgJ3JlcXVlc3RFcnJvcicsIGh0dHApO1xyXG59XHJcbmZ1bmN0aW9uIHByb2Nlc3NSZXNwb25zZShyZXNwb25zZSwgaW50ZXJjZXB0b3JzLCByZXF1ZXN0LCBodHRwKSB7XHJcbiAgICByZXR1cm4gYXBwbHlJbnRlcmNlcHRvcnMocmVzcG9uc2UsIGludGVyY2VwdG9ycywgJ3Jlc3BvbnNlJywgJ3Jlc3BvbnNlRXJyb3InLCByZXF1ZXN0LCBodHRwKTtcclxufVxyXG5mdW5jdGlvbiBhcHBseUludGVyY2VwdG9ycyhpbnB1dCwgaW50ZXJjZXB0b3JzLCBzdWNjZXNzTmFtZSwgZXJyb3JOYW1lKSB7XHJcbiAgICB2YXIgaW50ZXJjZXB0b3JBcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDQ7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGludGVyY2VwdG9yQXJnc1tfaSAtIDRdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiAoaW50ZXJjZXB0b3JzIHx8IFtdKVxyXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGNoYWluLCBpbnRlcmNlcHRvcikge1xyXG4gICAgICAgIHZhciBzdWNjZXNzSGFuZGxlciA9IGludGVyY2VwdG9yW3N1Y2Nlc3NOYW1lXTtcclxuICAgICAgICB2YXIgZXJyb3JIYW5kbGVyID0gaW50ZXJjZXB0b3JbZXJyb3JOYW1lXTtcclxuICAgICAgICByZXR1cm4gY2hhaW4udGhlbihzdWNjZXNzSGFuZGxlciAmJiAoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBzdWNjZXNzSGFuZGxlci5jYWxsLmFwcGx5KHN1Y2Nlc3NIYW5kbGVyLCBbaW50ZXJjZXB0b3IsIHZhbHVlXS5jb25jYXQoaW50ZXJjZXB0b3JBcmdzKSk7IH0pIHx8IGlkZW50aXR5LCBlcnJvckhhbmRsZXIgJiYgKGZ1bmN0aW9uIChyZWFzb24pIHsgcmV0dXJuIGVycm9ySGFuZGxlci5jYWxsLmFwcGx5KGVycm9ySGFuZGxlciwgW2ludGVyY2VwdG9yLCByZWFzb25dLmNvbmNhdChpbnRlcmNlcHRvckFyZ3MpKTsgfSkgfHwgdGhyb3dlcik7XHJcbiAgICB9LCBQcm9taXNlLnJlc29sdmUoaW5wdXQpKTtcclxufVxyXG5mdW5jdGlvbiBpc0pTT04oc3RyKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIEpTT04ucGFyc2Uoc3RyKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XHJcbiAgICByZXR1cm4geDtcclxufVxyXG5mdW5jdGlvbiB0aHJvd2VyKHgpIHtcclxuICAgIHRocm93IHg7XHJcbn1cclxuZnVuY3Rpb24gY2FsbEZldGNoKGNsaWVudCwgaW5wdXQsIGJvZHksIGluaXQsIG1ldGhvZCkge1xyXG4gICAgaWYgKCFpbml0KSB7XHJcbiAgICAgICAgaW5pdCA9IHt9O1xyXG4gICAgfVxyXG4gICAgaW5pdC5tZXRob2QgPSBtZXRob2Q7XHJcbiAgICBpZiAoYm9keSkge1xyXG4gICAgICAgIGluaXQuYm9keSA9IGJvZHk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xpZW50LmZldGNoKGlucHV0LCBpbml0KTtcclxufVxuXG5leHBvcnQgeyBqc29uLCByZXRyeVN0cmF0ZWd5LCBSZXRyeUludGVyY2VwdG9yLCBIdHRwQ2xpZW50Q29uZmlndXJhdGlvbiwgSHR0cENsaWVudCB9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///qQke\n");

/***/ })

}]);